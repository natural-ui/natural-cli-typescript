{"remainingRequest":"E:\\workspace-myself\\natural-cli-typescript\\webpack4-react-ts-mobx-antd-ydjfe\\node_modules\\thread-loader\\dist\\cjs.js??ref--7-1!E:\\workspace-myself\\natural-cli-typescript\\webpack4-react-ts-mobx-antd-ydjfe\\node_modules\\babel-loader\\lib\\index.js??ref--7-2!E:\\workspace-myself\\natural-cli-typescript\\webpack4-react-ts-mobx-antd-ydjfe\\src\\store\\socketStore\\index.ts","dependencies":[{"path":"E:\\workspace-myself\\natural-cli-typescript\\webpack4-react-ts-mobx-antd-ydjfe\\src\\store\\socketStore\\index.ts","mtime":1557549177000},{"path":"E:\\workspace-myself\\natural-cli-typescript\\webpack4-react-ts-mobx-antd-ydjfe\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558612017300},{"path":"E:\\workspace-myself\\natural-cli-typescript\\webpack4-react-ts-mobx-antd-ydjfe\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1550204147052},{"path":"E:\\workspace-myself\\natural-cli-typescript\\webpack4-react-ts-mobx-antd-ydjfe\\node_modules\\babel-loader\\lib\\index.js","mtime":1557710044686}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["E:\\workspace-myself\\natural-cli-typescript\\webpack4-react-ts-mobx-antd-ydjfe\\src\\store\\socketStore\\index.ts"],"names":["observable","action","computed","StoreExt","LOCALSTORAGE_KEYS","SOCKER_TYPES","DATA_FORMATS","SocketStore","socketType","localStorage","getItem","SOCKET_TYPE","DATA_FORMAT","NOT_SUPPORT_POLLING","type","dataFormat","socketIsConnected","messages","message","time","Date","getTime","push","val","notSupportPolling","setItem","String"],"mappings":"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","sourcesContent":["import { observable, action, computed } from 'mobx'\n\nimport { StoreExt } from '@utils/reactExt'\nimport { LOCALSTORAGE_KEYS } from '@constants/index'\nimport { SOCKER_TYPES, DATA_FORMATS } from '@constants/socket'\n\n/**\n * socket debugger store\n *\n * @export\n * @class SocketStore\n * @extends {StoreExt}\n */\nexport class SocketStore extends StoreExt {\n    @observable\n    socketType: ISocketStore.SocketType =\n        (localStorage.getItem(LOCALSTORAGE_KEYS.SOCKET_TYPE) as ISocketStore.SocketType) || SOCKER_TYPES[0]\n    @observable\n    dataFormat: ISocketStore.DataFormatType =\n        (localStorage.getItem(LOCALSTORAGE_KEYS.DATA_FORMAT) as ISocketStore.DataFormatType) || DATA_FORMATS[0]\n    @observable\n    socketIsConnected: boolean = false\n    @observable\n    messages: ISocketStore.Message[] = []\n    @observable\n    notSupportPolling: boolean = localStorage.getItem(LOCALSTORAGE_KEYS.NOT_SUPPORT_POLLING) === 'true'\n\n    @computed\n    get isSocketIO() {\n        return this.socketType === SOCKER_TYPES[0]\n    }\n\n    @action\n    setSocketType = (type: ISocketStore.SocketType) => {\n        this.socketType = type\n    }\n\n    @action\n    setDataFormat = (dataFormat: ISocketStore.DataFormatType) => {\n        this.dataFormat = dataFormat\n    }\n\n    @action\n    setSocketIsConnected = (socketIsConnected: boolean) => {\n        this.socketIsConnected = socketIsConnected\n    }\n\n    @action\n    clearMessages = () => {\n        this.messages = []\n    }\n\n    @action\n    addMessage = (message: ISocketStore.Message) => {\n        if (!message.time) {\n            message.time = new Date().getTime()\n        }\n        this.messages.push(message)\n    }\n\n    @action\n    setNotSupportPolling = (val: boolean) => {\n        this.notSupportPolling = val\n        localStorage.setItem(LOCALSTORAGE_KEYS.NOT_SUPPORT_POLLING, String(val))\n    }\n}\n\nexport default new SocketStore()\n"]}]}